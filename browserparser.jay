%{
class browserparser {
%}

%token JWHILE
%token DO
%token FOR
%token JIF
%token ELSE
%token JTYPE
%token FLOAT
%token INT
%token STRING
%token JCHAR
%token BOOLEAN
%token IDENTIFIER
%token ACCESSRIGHT
%token STATIC
%token ABSTRACT
%token JCLASS
%token SEMICOLON
%token EQUALS
%token COMMA
%token POINT
%token UNARYOPERATOR
%token OPERATOR
%token LBRACE
%token RBRACE
%token LBRACKET
%token RBRACKET
%token JTHIS
%token JSUPER
%token JNEW
%token NULL
%token JRETURN
%token TRUE


%type <Program> programm
%type <Class> class emptyClass
%type <Method> method
%type <Field> field
%type <Parameter> parameter
%type <Type> type
%type <Expr> expression
%type <Super> super
%type <This> this
%type <Integer> integer
%type <Bool> bool
%type <InstVar> instVar
%type <JString> string
%type <Jnull> jnull
%type <Char> char
%type <LocalOrFieldVar> localOrFieldVar
%type <Binary> binary
%type <Unary> unary
%type <StmtExprExpr> stmtExprExpr
%type <Stmt> statement
%type <LocalVarDecl> localVarDecl
%type <While> whilestatement
%type <If> ifthenstatement ifthenelsestatement 
%type <Return> returnstatement
%type <Block> block
%type <StmtExprStmt> stmtExprStmt
%type <New> new
%type <StmtExpr> stmtExpr
%type <MethodCall> methodCall emptyMethodCall
%type <Assign> assign
%type <Vector> fields statements methods expressions parameters
%type <String> IDENTIFIER INT OPERATOR UNARYOPERATOR BOOLEAN STRING JCHAR EQUALS JTYPE

%start programm

%%
programm : class { $$ = new Program($1); }
         | emptyClass { $$ = new Program($1); }

class : JCLASS IDENTIFIER LBRACKET fields methods RBRACKET { $$ = new Class($4, $5); }

emptyClass : JCLASS IDENTIFIER LBRACKET RBRACKET { $$ = new Class(new Vector(), new Vector()); }

fields : field { $$ = new Vector(); }
       | fields field { $$ = new Vector(); }

field : type IDENTIFIER SEMICOLON { $$ = new Field($2, $1); }

type : JTYPE { $$ = new Type(); }

methods : method { $$ = new Vector(); }
        | methods method { $$ = new Vector(); }

method : type IDENTIFIER LBRACE parameters RBRACE block { $$ = new Method($2, $1, $4, $6); }
       | type IDENTIFIER LBRACE RBRACE block { $$ = new Method($2, $1, new Vector(), $5); }

parameters : parameter { $$ = new Vector(); }
           | parameters COMMA parameter { $$ = new Vector(); }

parameter : type IDENTIFIER{ $$ = new Parameter($2, $1); }

block : LBRACKET RBRACKET { $$ = new Block(new Vector()); }
      | LBRACKET statements RBRACKET { $$ = new Block($2); }

statements : statement { $$ = new Vector(); }
           | statements statement { $$ = new Vector(); }

statement : ifthenstatement {}
          | ifthenelsestatement {}
          | whilestatement {}
          | block {}
          | returnstatement {}
          | stmtExprStmt {}
          | localVarDecl {}

ifthenstatement : JIF LBRACE expression RBRACE statement { $$ = new If($3, $5, new Block(new Vector())); }

ifthenelsestatement : JIF LBRACE expression RBRACE statement ELSE statement { $$ = new If($3, $5, $7); }

whilestatement : JWHILE LBRACE expression RBRACE statement { $$ = new While($3, $5); }

returnstatement : JRETURN expression SEMICOLON { $$ = new Return($2); }

stmtExprExpr : stmtExpr { $$ = new StmtExprExpr($1); }

stmtExprStmt : stmtExpr { $$ = new StmtExprStmt($1); }

localVarDecl : type IDENTIFIER SEMICOLON { $$ = new LocalVarDecl($1, $2); }

expression : this {}
           | super {}
           | localOrFieldVar {}
           | integer {}
           | binary {}
           | unary {}
           | bool {}
           | instVar {}
           | string {}
           | jnull {}
           | char {}
           | stmtExprExpr {}

stmtExpr : assign {}
         | new {}
         | methodCall {}
         | emptyMethodCall {}

this : JTHIS { $$ = new This(); }

super : JSUPER { $$ = new Super(); }

localOrFieldVar : IDENTIFIER { $$ = new LocalOrFieldVar($1); }

integer : INT { $$ = new Integer($1); }

binary : expression OPERATOR expression { $$ = new Binary($2, $1, $3); }

unary : UNARYOPERATOR expression { $$ = new Unary($1, $2); }

bool : BOOLEAN { $$ = new Bool($1); }

instVar : expression POINT IDENTIFIER { $$ = new InstVar($1, $3); }

string : STRING { $$ = new JString($1); }

jnull : NULL { $$ = new Jnull(); }

char : JCHAR { $$ = new Char($1); }

assign : IDENTIFIER EQUALS expression SEMICOLON { $$ = new Assign($1, $3); }

new : JNEW type LBRACE expressions RBRACE { $$ = new New($2, $4); }

methodCall : expression POINT IDENTIFIER LBRACE expressions RBRACE { $$ = new MethodCall($1, $3, $5); }

emptyMethodCall : expression POINT IDENTIFIER LBRACE RBRACE { $$ = new MethodCall($1, $3, new Vector()); }

expressions : expression { $$ = new Vector(); }
            | expressions COMMA expression { $$ = new Vector(); }


%%
}